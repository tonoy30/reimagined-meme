using System.Reflection;
using Microsoft.EntityFrameworkCore;
using RecapApi.Attributes;
using RecapApi.ValueGenerators;

namespace RecapApi.Extensions;

public static class ModelBuilderExtensions
{
    public static ModelBuilder ConfigureAutoGeneratedProperties<T>(this ModelBuilder modelBuilder) where T : class
    {
        var entityType = modelBuilder.Entity<T>().Metadata.ClrType;

        foreach (var property in entityType.GetProperties())
        {
            if (property.GetCustomAttribute<GenerateOnAddAttribute>() is not null)
            {
                modelBuilder
                    .Entity<T>()
                    .Property(property.Name)
                    .HasDefaultValueSql("now() at time zone 'utc'")
                    .ValueGeneratedOnAdd();
            }

            if (property.GetCustomAttribute<GenerateOnAddOrUpdateAttribute>() is not null)
            {
                modelBuilder
                    .Entity<T>()
                    .Property(property.Name)
                    .HasDefaultValueSql("now() at time zone 'utc'")
                    .ValueGeneratedOnAddOrUpdate();
            }
        }

        return modelBuilder;
    }

    public static ModelBuilder ConfigureValueGenerator(this ModelBuilder modelBuilder)
    {
        foreach (var entityType in modelBuilder.Model.GetEntityTypes())
        {
            foreach (var property in entityType.GetProperties())
            {
                var identityAttribute = property.PropertyInfo?.GetCustomAttribute<IdentityAttribute>();
                if (identityAttribute is null) continue;
                var valueGenerator = new IdentityValueGenerator(identityAttribute.Prefix, identityAttribute.Size);
                modelBuilder.Entity(entityType.ClrType).Property(property.Name)
                    .HasValueGenerator((_, _) => valueGenerator);
            }
        }

        return modelBuilder;
    }
}